-------------------------------------------------Etapa 1, Chessmate team------------------------------------------------

    In aceasta etapa a trebuit sa implementam intern reprezentarea unei table de sah si a pieselor de joc ale acesteia,
precum si legatura cu programul XBoard. Pentru a realiza aceasta comunicare intre bot si XBoard am creat clasa
CommandManager care interpreteaza comenzile date de catre utilizator, iar mai departe le prelucreaza in functie de
cerintele aferente fiecareia. De asemenea am creat clasa ChessBoard in care se construieste o tabla de sah, la nivel
intern, avand in prima instanta toate piesele aflate pe pozitia lor de start. Fiecare piesa (King, Queen, Rook, Bishop,
Knight, Pawn) corespunde unei clase care mosteneste clasa abstracta Piece, in care se verifica daca o mutare este valida
pentru piesa respectiva si care implementeaza executia unei mutari valide. In plus, am creat clasa MoveManager care
implementeaza anumite functii folosite de XBoard (new, force, go, resign si move), acestea fiind apelate in momemtul
trimiterii unei comenzi catre CommandManager.

    In ceea ce priveste miscarea pionilor botului, se pleaca initial cu un singur pion care inainteaza cat de mult
posibil (atata timp cat mai exista mutari valide) si care daca in calea sa intalneste o piesa a adversarului aflata
intr-o pozitie din care poate fi capturata, acesta o va lua. De asemenea daca unul din pioni reuseste sa ajunga la
capatul tablei acesta se va transforma automat in dama (regina). Cand pionul pe care botul incerca sa il mute ramane
fara miscari valide sau ajunge sa fie transformat in regina, botul va incepe miscarea urmatorului pion al sau. In cazul
in care nu mai exista pioni cu mutari valide se va apela comanda resign.

-------------------------------------------------Etapa 2, Chessmate team------------------------------------------------

     In aceasta etapa a trebuit sa dezvoltam implementarea de la etapa anterioara astfel incat programul sa fie capabil
sa joace un joc de sah complet.
    Pentru ca botul sa fie capabil sa primeasca mutari, sa-si actualizeze tabla si sa raspunda cu alta mutare a fost
necesar ca in clasa fiecarei piese sa se verifice mutarile valide cu ajutorul functiei isValidMove() si sa se genereze
toate mutarile posibile si valide cu ajutorul functiei getPossibleMoves().
    In cazul in care se primeste sah, botul este capabil sa se apere si sa nu faca mutari invalide. In clasa King
exista o metoda care verifica din toate unghiurile daca regele este sau nu in sah, returnand un rezultat boolean.
Se ia fiecare piesa de culoarea botului si se genereaza toate mutarile valide cu ajutorul functiei getPossibleMoves.
O miscare este considerata valida doar daca dupa efectuarea acesteia regele nu va fi in sah. Aceasta verificare
garanteaza ca nu se va efectua o mutare care ar pune regele in sah si se efectueaza doar mutari care scot regele din
sah. Exista, de asemenea, o prioritizare a mutarilor care iau piesele adversarului si a mutarii care face rocada.
    Pentru a fi valida rocada trebuie sa se respecte urmatoarele conditii: se verifica daca regele nu este in sah, daca
nu a fost mutat inainte de momentul actual, daca tura nu a fost mutata inainte de momentul actual, daca regele nu trece
prin sah pe traseul de rocada si daca regele se afla in sah in noua pozitie dupa rocada. Rocada este de doua tipuri:
rocada mica, respectiv rocada mare. Atat pentru piesele negre, cat si pentru piesele albe se stabilesc pozitiile in
care s-ar efectua ambele tipuri de rocade si in functie de conditiile indeplinite se va efectua rocada corespunzatoare.
Rocada este o mutare mai speciala, implicand mutarea a doua piese pe tabla de joc.
    In ceea ce priveste pionul s-a adaugat si cazul in care se poate efectua en passant, verificandu-se ca atunci cand
se muta un pion doua campuri inainte fata de pozitia initiala si trece pe langa un pion adversar poate fi capturat de
cel adversar ca si cand s-ar fi deplasat doar un camp in fata.

------------------------------------------------------------------------------------------------------------------------